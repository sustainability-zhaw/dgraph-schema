
{ 
  	# the filter

  	vFilter as var(func: type(InfoObject)) 
      #@filter(
      #  alloftext(InfoObject.title, "term") or 
      #  alloftext(InfoObject.abstract, "term") or 
      #  alloftext(InfoObject.extras, "term")
      #)
      @cascade {
        uid
        
        # cascading filters 

        #InfoObject.persons @filter(
        #    eq(Person.initials,"zyss") and
        #    eq(Person.initials,"borz")
        #  ) {
		#	uid
        #}

        #InfoObject.department @filter(
        #    eq(Department.id, "department_N") and 
        #    eq(Department.id, "department_W")
        #  ) {
        #    uid
        #}

        #InfoObject.sdgs @filter(
        #    eq(Sdg.id, "sdg_1") and 
        #    eq(Sdg.id, "sdg_2")
        #  ) {
        #    uid
        #}

        #InfoObject.keywords @filter(anyofterms(Keyword.name, "term")) {
        #    uid
        #}

        #InfoObject.class @filter(anyofterms(PublicationClass.name, "term")) {
        #    uid
        #}
 	 }

    # The section filter

    vObjectType as var(func: allofterms(InfoObjectType.name, "publications")) {
    	uid
    }

    # everything from this point onwards remains unaltered

    # main nav stats
      
    infoobjecttype(func: type(InfoObjectType)) {
		id: InfoObjectType.name
      	n: count(InfoObjectType.objects @filter(uid(vFilter)))
    }
    
    vPersons as var(func: type(Person)) @cascade {
      	uid
		Person.objects @filter(uid(vFilter)) {
			uid
        }
    }
      
    persons(func: uid(vPersons)){
		n: count(uid)
    }
      
    # constrained stats for the section
    
    # how many matches are in the curent view  

    sdg(func: type(Sdg)) {
        id: Sdg.id
        n: count(Sdg.objects @filter(uid_in(InfoObject.category, uid(vObjectType)) AND uid(vFilter)))
    }

    department(func: type(Department)) {
        id: Department.id
        n: count(Department.objects @filter(uid_in(InfoObject.category, uid(vObjectType)) and uid(vFilter)))
    }
    
    # author count
    # need a helper variable to sort by counts, more tests required
    # right now, the count shows all contributions in the current   section
    persons(func: uid(vPersons)) {
		id: Person.LDAPDN
        n: count(Person.objects @filter(uid_in(InfoObject.category, uid(vObjectType)) and uid(vFilter)))
    }      
}