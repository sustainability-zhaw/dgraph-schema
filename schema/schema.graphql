type Sdg {
    id: String! @id @search(by: [exact])
    objects: [InfoObject] @hasInverse(field: sdgs) 
}

type Department {
    id: String! @id @search(by: [exact])
    objects: [InfoObject] @hasInverse(field: departments) 
    persons: [Person] @hasInverse(field: department)
}

type InfoObject @withSubscription {
    title: String @search(by: [fulltext])
    persons: [ Person ] 
    authors: [ Author ]
    year: Int @search 
    abstract: String @search(by: [fulltext])
    language: String
    link: String! @id @search(by: [exact])
    extras: String @search(by: [fulltext])
    sdgs: [ Sdg ] @hasInverse(field: objects) 
    keywords: [ Keyword ]
    class: [ PublicationClass ]
    category: InfoObjectType @hasInverse(field: objects)
    subtype: InfoObjectSubType @hasInverse(field: objects)
    departments: [Department] @hasInverse(field: objects)
    dateUpdate: DateTime
}

type Person @withSubscription {
    fullname: String @search(by: [term])
    initials: String @search(by: [exact])
    surname: String  @search(by: [term])
    givenname: String
    displayname: String
    gender: String
    title: String
    mail: String
    ipphone: String
    physicaldeliveryofficename: String
    team: Team
    directreports: [ Person ] @hasInverse(field: manager)
    manager: Person @hasInverse(field: directreports)
    department: Department
    objects: [ InfoObject ] @hasInverse(field: persons)
    pseudonyms: [ Author ]
    LDAPDN: String! @id @search(by: [exact])
    retired: Int @search
    ad_check: Int @search 
}

type Team {
    LDAPDN: String! @id @search(by: [term]) 
    person: [Person] @hasInverse(field: team)
    ad_check: Int @search
}

type Author @withSubscription {
    fullname: String! @id @search(by: [term]) 
    person: Person @hasInverse(field: pseudonyms)
    ad_check: Int @search
}

type InfoObjectType { 
    name: String! @id @search(by: [term])
    objects: [ InfoObject ] @hasInverse(field: category)
}

type InfoObjectSubType { 
    name: String! @id @search(by: [term])
    objects: [ InfoObject ] @hasInverse(field: subtype)
}

type PublicationClass { 
    id: String! @id @search
    name: String @search(by: [term])
    objects: [ InfoObject ] @hasInverse(field: class)
}

type Keyword {
    name: String! @id @search(by: [term])
    objects: [ InfoObject ] @hasInverse(field: keywords)
}
